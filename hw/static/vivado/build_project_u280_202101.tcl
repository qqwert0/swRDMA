#*****************************************************************************************
# Vivado (TM) v2021.1 (64-bit)
#
# build_project.tcl: Tcl script for re-creating project 'rc4ml_static_u280'
#
# Generated by Vivado on Fri Jun 09 16:15:17 +0800 2023
# IP Build 3246043 on Fri Jun 11 00:30:35 MDT 2021
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (build_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "rc4ml_static_u280"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "build_project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcu280-fsvh2892-2L-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:au280:part0:1.1" -objects $obj
set_property -name "corecontainer.enable" -value "1" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_core_container" -value "1" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "au50" -objects $obj
set_property -name "pr_flow" -value "1" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "20" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "20" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "20" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "20" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "20" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "20" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "20" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

file rename -force ${proj_dir}/../rc4ml_static_u280.srcs ${proj_dir}/${_xil_proj_name_}.srcs

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${proj_dir}/${_xil_proj_name_}.srcs/sources_1/new/StaticU280Top.sv" ]\
]
set imported_files [add_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "new/StaticU280Top.sv"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "StaticU280Top" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]

# Create 'constrs_static' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_static] ""]} {
  create_fileset -constrset constrs_static
}

# Set 'constrs_static' fileset object
set obj [get_filesets constrs_static]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${proj_dir}/${_xil_proj_name_}.srcs/constrs_static/new/constr_post_opt.xdc]"
set file_imported [add_files -fileset constrs_static [list $file]]
set file "new/constr_post_opt.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_static] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
set_property -name "used_in" -value "implementation opt_design_post" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${proj_dir}/${_xil_proj_name_}.srcs/constrs_static/new/constr_base.xdc]"
set file_imported [add_files -fileset constrs_static [list $file]]
set file "new/constr_base.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_static] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_static' fileset properties
set obj [get_filesets constrs_static]
set_property -name "target_constrs_file" -value "${proj_dir}/${_xil_proj_name_}.srcs/constrs_static/new/constr_base.xdc" -objects $obj
set_property -name "target_ucf" -value "${proj_dir}/${_xil_proj_name_}.srcs/constrs_static/new/constr_base.xdc" -objects $obj

# Create 'constrs_pr' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_pr] ""]} {
  create_fileset -constrset constrs_pr
}

# Set 'constrs_pr' fileset object
set obj [get_filesets constrs_pr]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${proj_dir}/${_xil_proj_name_}.srcs/constrs_pr/new/constr_pr.xdc]"
set file_imported [add_files -fileset constrs_pr [list $file]]
set file "new/constr_pr.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_pr] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
set_property -name "processing_order" -value "LATE" -objects $file_obj

# Set 'constrs_pr' fileset properties
set obj [get_filesets constrs_pr]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "StaticU280Top" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'U280Core' partition definition
create_partition_def -name U280Core -module AlveoDynamicTop
set obj [get_partition_defs U280Core]
set_property -name "name" -value "U280Core" -objects $obj
set_property -name "use_blackbox_stub" -value "1" -objects $obj

# Create 'U280CoreBase' reconfigurable module
set partitionDef [get_partition_defs U280Core]
create_reconfig_module -name U280CoreBase -partition_def $partitionDef
set_property default_rm U280CoreBase $partitionDef
set obj [get_reconfig_modules U280CoreBase]
set_property -name "module_name" -value "AlveoDynamicTop" -objects $obj

set files [list \
 "[file normalize "$proj_dir/${_xil_proj_name_}.srcs/sources_1/new/U280DynamicGreyBox.sv"]"\
]
add_files -norecurse -of_objects [get_reconfig_modules U280CoreBase] $files

# Create IPs needed for the project

# QDMA
create_ip -name qdma -vendor xilinx.com -library ip -version 4.0 -module_name QDMABlackBox
set_property -dict [list CONFIG.mode_selection {Advanced} CONFIG.axist_bypass_en {true} CONFIG.pcie_extended_tag {false} CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal} CONFIG.testname {st} CONFIG.pf0_bar0_type_qdma {AXI_Lite_Master} CONFIG.pf0_bar0_size_qdma {4} CONFIG.pf0_bar2_type_qdma {DMA} CONFIG.pf0_bar2_size_qdma {256} CONFIG.pf0_bar4_enabled_qdma {true} CONFIG.pf0_bar4_64bit_qdma {true} CONFIG.pf0_bar4_scale_qdma {Megabytes} CONFIG.pf0_bar4_size_qdma {4} CONFIG.pf1_bar0_type_qdma {AXI_Lite_Master} CONFIG.pf1_bar0_size_qdma {4} CONFIG.pf1_bar2_type_qdma {DMA} CONFIG.pf1_bar2_size_qdma {256} CONFIG.pf1_bar4_enabled_qdma {true} CONFIG.pf1_bar4_64bit_qdma {true} CONFIG.pf1_bar4_scale_qdma {Megabytes} CONFIG.pf1_bar4_size_qdma {4} CONFIG.pf2_bar0_type_qdma {AXI_Lite_Master} CONFIG.pf2_bar0_size_qdma {4} CONFIG.pf2_bar2_type_qdma {DMA} CONFIG.pf2_bar2_size_qdma {256} CONFIG.pf2_bar4_enabled_qdma {true} CONFIG.pf2_bar4_64bit_qdma {true} CONFIG.pf2_bar4_scale_qdma {Megabytes} CONFIG.pf2_bar4_size_qdma {4} CONFIG.pf3_bar0_type_qdma {AXI_Lite_Master} CONFIG.pf3_bar0_size_qdma {4} CONFIG.pf3_bar2_type_qdma {DMA} CONFIG.pf3_bar2_size_qdma {256} CONFIG.pf3_bar4_enabled_qdma {true} CONFIG.pf3_bar4_64bit_qdma {true} CONFIG.pf3_bar4_scale_qdma {Megabytes} CONFIG.pf3_bar4_size_qdma {4} CONFIG.PF0_MSIX_CAP_TABLE_BIR_qdma {BAR_3:2} CONFIG.PF1_MSIX_CAP_TABLE_BIR_qdma {BAR_3:2} CONFIG.PF2_MSIX_CAP_TABLE_BIR_qdma {BAR_3:2} CONFIG.PF3_MSIX_CAP_TABLE_BIR_qdma {BAR_3:2} CONFIG.PF0_MSIX_CAP_PBA_BIR_qdma {BAR_3:2} CONFIG.PF1_MSIX_CAP_PBA_BIR_qdma {BAR_3:2} CONFIG.PF2_MSIX_CAP_PBA_BIR_qdma {BAR_3:2} CONFIG.PF3_MSIX_CAP_PBA_BIR_qdma {BAR_3:2} CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion} CONFIG.en_axi_mm_qdma {false}] [get_ips QDMABlackBox]
# Base design - Debug Bridge
create_ip -name debug_bridge -vendor xilinx.com -library ip -version 3.0 -module_name DebugBridgeBase
set_property -dict [list CONFIG.C_DESIGN_TYPE {1}] [get_ips DebugBridgeBase]
move_files -of_objects [get_reconfig_modules U280CoreBase] [get_files  $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/DebugBridgeBase/DebugBridgeBase.xci]
set_property generate_synth_checkpoint false [get_files -of_objects [get_reconfig_modules U280CoreBase] $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/DebugBridgeBase/DebugBridgeBase.xci]
# Base design - CMAC
create_ip -name cmac_usplus -vendor xilinx.com -library ip -version 3.1 -module_name CMACBlackBoxBase
set_property -dict [list CONFIG.CMAC_CAUI4_MODE {1} CONFIG.NUM_LANES {4x25} CONFIG.GT_REF_CLK_FREQ {156.25} CONFIG.USER_INTERFACE {AXIS} CONFIG.TX_FLOW_CONTROL {0} CONFIG.RX_FLOW_CONTROL {0} CONFIG.CMAC_CORE_SELECT {CMACE4_X0Y6} CONFIG.GT_GROUP_SELECT {X0Y40~X0Y43} CONFIG.LANE1_GT_LOC {X0Y40} CONFIG.LANE2_GT_LOC {X0Y41} CONFIG.LANE3_GT_LOC {X0Y42} CONFIG.LANE4_GT_LOC {X0Y43} CONFIG.LANE5_GT_LOC {NA} CONFIG.LANE6_GT_LOC {NA} CONFIG.LANE7_GT_LOC {NA} CONFIG.LANE8_GT_LOC {NA} CONFIG.LANE9_GT_LOC {NA} CONFIG.LANE10_GT_LOC {NA} CONFIG.RX_GT_BUFFER {1} CONFIG.GT_RX_BUFFER_BYPASS {0} CONFIG.ETHERNET_BOARD_INTERFACE {qsfp0_4x} CONFIG.DIFFCLK_BOARD_INTERFACE {qsfp0_156mhz}] [get_ips CMACBlackBoxBase]
move_files -of_objects [get_reconfig_modules U280CoreBase] [get_files  $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/CMACBlackBoxBase/CMACBlackBoxBase.xci]
set_property generate_synth_checkpoint false [get_files -of_objects [get_reconfig_modules U280CoreBase] $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/CMACBlackBoxBase/CMACBlackBoxBase.xci]
# Base design - HBM
# create_ip -name hbm -vendor xilinx.com -library ip -version 1.0 -module_name HBMBlackBoxBase
# set_property -dict [list CONFIG.USER_HBM_DENSITY {8GB}  CONFIG.USER_HBM_STACK {2}  CONFIG.USER_MEMORY_DISPLAY {8192}  CONFIG.USER_SWITCH_ENABLE_01 {TRUE}  CONFIG.USER_HBM_CP_1 {6}  CONFIG.USER_HBM_RES_1 {10}  CONFIG.USER_HBM_LOCK_REF_DLY_1 {31}  CONFIG.USER_HBM_LOCK_FB_DLY_1 {31}  CONFIG.USER_HBM_FBDIV_1 {36}  CONFIG.USER_HBM_HEX_CP_RES_1 {0x0000A600}  CONFIG.USER_HBM_HEX_LOCK_FB_REF_DLY_1 {0x00001f1f}  CONFIG.USER_HBM_HEX_FBDIV_CLKOUTDIV_1 {0x00000902}  CONFIG.USER_MC0_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC1_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC2_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC3_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC4_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC5_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC6_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC7_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC8_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC9_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC10_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC11_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC12_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC13_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC14_TRAFFIC_OPTION {Linear}  CONFIG.USER_MC15_TRAFFIC_OPTION {Linear}  CONFIG.USER_CLK_SEL_LIST1 {AXI_23_ACLK}  CONFIG.USER_MC_ENABLE_08 {TRUE}  CONFIG.USER_MC_ENABLE_09 {TRUE}  CONFIG.USER_MC_ENABLE_10 {TRUE}  CONFIG.USER_MC_ENABLE_11 {TRUE}  CONFIG.USER_MC_ENABLE_12 {TRUE}  CONFIG.USER_MC_ENABLE_13 {TRUE}  CONFIG.USER_MC_ENABLE_14 {TRUE}  CONFIG.USER_MC_ENABLE_15 {TRUE}  CONFIG.USER_MC_ENABLE_APB_01 {TRUE}  CONFIG.USER_MC0_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC1_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC2_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC3_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC4_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC5_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC6_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC7_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC8_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC9_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC10_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC11_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC12_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC13_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC14_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC15_LOOKAHEAD_SBRF {true}  CONFIG.USER_MC0_EN_SBREF {true}  CONFIG.USER_MC1_EN_SBREF {true}  CONFIG.USER_MC2_EN_SBREF {true}  CONFIG.USER_MC3_EN_SBREF {true}  CONFIG.USER_MC4_EN_SBREF {true}  CONFIG.USER_MC5_EN_SBREF {true}  CONFIG.USER_MC6_EN_SBREF {true}  CONFIG.USER_MC7_EN_SBREF {true}  CONFIG.USER_MC8_EN_SBREF {true}  CONFIG.USER_MC9_EN_SBREF {true}  CONFIG.USER_MC10_EN_SBREF {true}  CONFIG.USER_MC11_EN_SBREF {true}  CONFIG.USER_MC12_EN_SBREF {true}  CONFIG.USER_MC13_EN_SBREF {true}  CONFIG.USER_MC14_EN_SBREF {true}  CONFIG.USER_MC15_EN_SBREF {true}  CONFIG.USER_PHY_ENABLE_08 {TRUE}  CONFIG.USER_PHY_ENABLE_09 {TRUE}  CONFIG.USER_PHY_ENABLE_10 {TRUE}  CONFIG.USER_PHY_ENABLE_11 {TRUE}  CONFIG.USER_PHY_ENABLE_12 {TRUE}  CONFIG.USER_PHY_ENABLE_13 {TRUE}  CONFIG.USER_PHY_ENABLE_14 {TRUE}  CONFIG.USER_PHY_ENABLE_15 {TRUE}] [get_ips HBMBlackBoxBase]
# move_files -of_objects [get_reconfig_modules U280CoreBase] [get_files  $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/HBMBlackBoxBase/HBMBlackBoxBase.xci]
# set_property generate_synth_checkpoint false [get_files -of_objects [get_reconfig_modules U280CoreBase] $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/HBMBlackBoxBase/HBMBlackBoxBase.xci]

# Set 'U280CoreBase' fileset file properties for local files
# set file "HBMBlackBoxBase/HBMBlackBoxBase.xci"
# set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
# set_property -name "generate_files_for_reference" -value "0" -objects $obj
# set_property -name "generate_synth_checkpoint" -value "0" -objects $obj
# set_property -name "registered_with_manager" -value "1" -objects $obj

set file "CMACBlackBoxBase/CMACBlackBoxBase.xci"
set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $obj
set_property -name "generate_synth_checkpoint" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj

set file "DebugBridgeBase/DebugBridgeBase.xci"
set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj
set_property -name "synth_checkpoint_mode" -value "Hierarchical" -objects $obj

set file "new/U280DynamicGreyBox.sv"
set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $obj

# set file "ip/HBMBlackBoxBase.xcix"
# set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
# set_property -name "is_managed" -value "0" -objects $obj
# set_property -name "registered_with_manager" -value "1" -objects $obj

set file "ip/CMACBlackBoxBase.xcix"
set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
set_property -name "is_managed" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj

set file "ip/DebugBridgeBase.xcix"
set obj [get_files -of_objects [get_reconfig_modules U280CoreBase] [list "*$file"]]
set_property -name "is_managed" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj


# Create 'U280CoreReconfig' reconfigurable module
set partitionDef [get_partition_defs U280Core]
create_reconfig_module -name U280CoreReconfig -partition_def $partitionDef
set obj [get_reconfig_modules U280CoreReconfig]
set_property -name "module_name" -value "AlveoDynamicTop" -objects $obj

# Create IPs needed for the project

# Reconfig design - Debug Bridge
create_ip -name debug_bridge -vendor xilinx.com -library ip -version 3.0 -module_name DebugBridge
set_property -dict [list CONFIG.C_DESIGN_TYPE {1}] [get_ips DebugBridge]
move_files -of_objects [get_reconfig_modules U280CoreReconfig] [get_files  $proj_dir/${_xil_proj_name_}.srcs/sources_1/ip/DebugBridge/DebugBridge.xci]

# Set 'U280CoreReconfig' fileset file properties for local files
set file "DebugBridge/DebugBridge.xci"
set obj [get_files -of_objects [get_reconfig_modules U280CoreReconfig] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj
set_property -name "synth_checkpoint_mode" -value "Hierarchical" -objects $obj

set file "ip/DebugBridge.xcix"
set obj [get_files -of_objects [get_reconfig_modules U280CoreReconfig] [list "*$file"]]
set_property -name "is_managed" -value "0" -objects $obj
set_property -name "registered_with_manager" -value "1" -objects $obj


# Create 'config_base' pr configurations
create_pr_configuration -name config_base -partitions [list core:U280CoreBase ]
set obj [get_pr_configurations config_base]
set_property -name "auto_import" -value "1" -objects $obj
set_property -name "partition_cell_rms" -value "core:U280CoreBase" -objects $obj
set_property -name "use_blackbox" -value "1" -objects $obj

# Create 'config_reconfig' pr configurations
create_pr_configuration -name config_reconfig -partitions [list core:U280CoreReconfig ]
set obj [get_pr_configurations config_reconfig]
set_property -name "auto_import" -value "1" -objects $obj
set_property -name "partition_cell_rms" -value "core:U280CoreReconfig" -objects $obj
set_property -name "use_blackbox" -value "1" -objects $obj

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_static
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "constrset" -value "constrs_static" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/synth_1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# Create 'U280CoreBase_synth_1' run (if not found)
if {[string equal [get_runs -quiet U280CoreBase_synth_1] ""]} {
    create_run -name U280CoreBase_synth_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset U280CoreBase
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs U280CoreBase_synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs U280CoreBase_synth_1]
}
set obj [get_runs U280CoreBase_synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'U280CoreBase_synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_synth_1] U280CoreBase_synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name U280CoreBase_synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs U280CoreBase_synth_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_synth_1] U280CoreBase_synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs U280CoreBase_synth_1]
set_property -name "constrset" -value "U280CoreBase" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# Create 'U280CoreReconfig_synth_1' run (if not found)
if {[string equal [get_runs -quiet U280CoreReconfig_synth_1] ""]} {
    create_run -name U280CoreReconfig_synth_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset U280CoreReconfig
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs U280CoreReconfig_synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs U280CoreReconfig_synth_1]
}
set obj [get_runs U280CoreReconfig_synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'U280CoreReconfig_synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_synth_1] U280CoreReconfig_synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs U280CoreReconfig_synth_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_synth_1] U280CoreReconfig_synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs U280CoreReconfig_synth_1]
set_property -name "constrset" -value "U280CoreReconfig" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_base' run (if not found)
if {[string equal [get_runs -quiet impl_base] ""]} {
    create_run -name impl_base -part xcu280-fsvh2892-2L-e -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_static -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_base]
  set_property flow "Vivado Implementation 2021" [get_runs impl_base]
}
set_property pr_configuration config_base [get_runs impl_base]
set obj [get_runs impl_base]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_base_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_base_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_base_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_io_0] "" ] } {
  create_report_config -report_name impl_base_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_base_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_base_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_base_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_base_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_base_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_base_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_base_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_base_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_base_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_base_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_base_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_power_0] "" ] } {
  create_report_config -report_name impl_base_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_base_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_base_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_base_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_base_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_base_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_base_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_base_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_base_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_base_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_base] impl_base_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_base_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_base
}
set obj [get_report_configs -of_objects [get_runs impl_base] impl_base_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_base]
set_property -name "constrset" -value "constrs_static" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/impl_2" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# Create 'impl_reconfig' run (if not found)
if {[string equal [get_runs -quiet impl_reconfig] ""]} {
      create_run -name impl_reconfig -part xcu280-fsvh2892-2L-e -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -pr_config config_reconfig -constrset constrs_pr -parent_run impl_base
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_reconfig]
  set_property flow "Vivado Implementation 2021" [get_runs impl_reconfig]
}
set obj [get_runs impl_reconfig]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_reconfig_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_reconfig_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_io_0] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_reconfig_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_reconfig_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_reconfig_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_power_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_reconfig_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_reconfig_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_reconfig_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_reconfig_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_reconfig_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_reconfig_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_reconfig_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_reconfig
}
set obj [get_report_configs -of_objects [get_runs impl_reconfig] impl_reconfig_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_reconfig]
set_property -name "constrset" -value "constrs_pr" -objects $obj
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "apply_constrset" -value "1" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/impl_reconfig" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# Create 'U280CoreBase_impl_1' run (if not found)
if {[string equal [get_runs -quiet U280CoreBase_impl_1] ""]} {
    create_run -name U280CoreBase_impl_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset U280CoreBase -parent_run U280CoreBase_synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs U280CoreBase_impl_1]
  set_property flow "Vivado Implementation 2021" [get_runs U280CoreBase_impl_1]
}
set obj [get_runs U280CoreBase_impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'U280CoreBase_impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'U280CoreBase_impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'U280CoreBase_impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'U280CoreBase_impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreBase_impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'U280CoreBase_impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'U280CoreBase_impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'U280CoreBase_impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name U280CoreBase_impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs U280CoreBase_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreBase_impl_1] U280CoreBase_impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs U280CoreBase_impl_1]
set_property -name "constrset" -value "U280CoreBase" -objects $obj
set_property -name "include_in_archive" -value "0" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "$proj_dir/${_xil_proj_name_}.srcs/utils_1/imports/AlveoDynamicTop_impl_1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# Create 'U280CoreReconfig_impl_1' run (if not found)
if {[string equal [get_runs -quiet U280CoreReconfig_impl_1] ""]} {
    create_run -name U280CoreReconfig_impl_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset U280CoreReconfig -parent_run U280CoreReconfig_synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs U280CoreReconfig_impl_1]
  set_property flow "Vivado Implementation 2021" [get_runs U280CoreReconfig_impl_1]
}
set obj [get_runs U280CoreReconfig_impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'U280CoreReconfig_impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'U280CoreReconfig_impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'U280CoreReconfig_impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name U280CoreReconfig_impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs U280CoreReconfig_impl_1
}
set obj [get_report_configs -of_objects [get_runs U280CoreReconfig_impl_1] U280CoreReconfig_impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs U280CoreReconfig_impl_1]
set_property -name "constrset" -value "U280CoreReconfig" -objects $obj
set_property -name "include_in_archive" -value "0" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_base]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1

delete_runs "impl_1"