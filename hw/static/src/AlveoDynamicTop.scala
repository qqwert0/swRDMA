package static
import chisel3._
import chisel3.util._
import chisel3.experimental.Analog

class AlveoDynamicBlackBox (
    SLAVE_BRIDGE : Boolean = false,
    ENABLE_CMAC_1:Boolean=true,
    ENABLE_CMAC_2:Boolean=false,
    ENABLE_DDR_1:Boolean=false,
    ENABLE_DDR_2:Boolean=false
) extends BlackBox{
    override val desiredName = "AlveoDynamicTop"
    val io = IO(new Bundle{
        val clock                                       = Input(UInt(1.W))
        val reset                                       = Input(UInt(1.W))
        val io_sysClk                                   = Input(UInt(1.W))
        val io_cmacClk                                  = Input(UInt(1.W))

        val io_cmacPin_tx_p                             = if (ENABLE_CMAC_1) {Some(Output(UInt(4.W)))} else None
        val io_cmacPin_tx_n                             = if (ENABLE_CMAC_1) {Some(Output(UInt(4.W)))} else None
        val io_cmacPin_rx_p                             = if (ENABLE_CMAC_1) {Some(Input(UInt(4.W)))} else None
        val io_cmacPin_rx_n                             = if (ENABLE_CMAC_1) {Some(Input(UInt(4.W)))} else None
        val io_cmacPin_gt_clk_p                         = if (ENABLE_CMAC_1) {Some(Input(UInt(1.W)))} else None
        val io_cmacPin_gt_clk_n                         = if (ENABLE_CMAC_1) {Some(Input(UInt(1.W)))} else None

        val io_cmacPin2_tx_p                            = if (ENABLE_CMAC_2) {Some(Output(UInt(4.W)))} else None
        val io_cmacPin2_tx_n                            = if (ENABLE_CMAC_2) {Some(Output(UInt(4.W)))} else None
        val io_cmacPin2_rx_p                            = if (ENABLE_CMAC_2) {Some(Input(UInt(4.W)))} else None
        val io_cmacPin2_rx_n                            = if (ENABLE_CMAC_2) {Some(Input(UInt(4.W)))} else None
        val io_cmacPin2_gt_clk_p                        = if (ENABLE_CMAC_2) {Some(Input(UInt(1.W)))} else None
        val io_cmacPin2_gt_clk_n                        = if (ENABLE_CMAC_2) {Some(Input(UInt(1.W)))} else None

        val io_ddrPort_clk                              = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_rst                              = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_aw_ready                     = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_aw_valid                     = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_aw_bits_addr                 = if (ENABLE_DDR_1) {Some(Output(UInt(34.W)))} else None
        val io_ddrPort_axi_aw_bits_burst                = if (ENABLE_DDR_1) {Some(Output(UInt(2.W)))} else None
        val io_ddrPort_axi_aw_bits_cache                = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_aw_bits_id                   = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_aw_bits_len                  = if (ENABLE_DDR_1) {Some(Output(UInt(8.W)))} else None
        val io_ddrPort_axi_aw_bits_lock                 = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_aw_bits_prot                 = if (ENABLE_DDR_1) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort_axi_aw_bits_qos                  = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_aw_bits_region               = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_aw_bits_size                 = if (ENABLE_DDR_1) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort_axi_ar_ready                     = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_ar_valid                     = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_ar_bits_addr                 = if (ENABLE_DDR_1) {Some(Output(UInt(34.W)))} else None
        val io_ddrPort_axi_ar_bits_burst                = if (ENABLE_DDR_1) {Some(Output(UInt(2.W)))} else None
        val io_ddrPort_axi_ar_bits_cache                = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_ar_bits_id                   = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_ar_bits_len                  = if (ENABLE_DDR_1) {Some(Output(UInt(8.W)))} else None
        val io_ddrPort_axi_ar_bits_lock                 = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_ar_bits_prot                 = if (ENABLE_DDR_1) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort_axi_ar_bits_qos                  = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_ar_bits_region               = if (ENABLE_DDR_1) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort_axi_ar_bits_size                 = if (ENABLE_DDR_1) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort_axi_w_ready                      = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_w_valid                      = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_w_bits_data                  = if (ENABLE_DDR_1) {Some(Output(UInt(512.W)))} else None
        val io_ddrPort_axi_w_bits_last                  = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_w_bits_strb                  = if (ENABLE_DDR_1) {Some(Output(UInt(64.W)))} else None
        val io_ddrPort_axi_r_ready                      = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_r_valid                      = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_r_bits_data                  = if (ENABLE_DDR_1) {Some(Input(UInt(512.W)))} else None
        val io_ddrPort_axi_r_bits_last                  = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_r_bits_resp                  = if (ENABLE_DDR_1) {Some(Input(UInt(2.W)))} else None
        val io_ddrPort_axi_r_bits_id                    = if (ENABLE_DDR_1) {Some(Input(UInt(4.W)))} else None
        val io_ddrPort_axi_b_ready                      = if (ENABLE_DDR_1) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort_axi_b_valid                      = if (ENABLE_DDR_1) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort_axi_b_bits_id                    = if (ENABLE_DDR_1) {Some(Input(UInt(4.W)))} else None
        val io_ddrPort_axi_b_bits_resp                  = if (ENABLE_DDR_1) {Some(Input(UInt(2.W)))} else None

        val io_ddrPort2_clk                             = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_rst                             = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_aw_ready                    = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_aw_valid                    = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_aw_bits_addr                = if (ENABLE_DDR_2) {Some(Output(UInt(34.W)))} else None
        val io_ddrPort2_axi_aw_bits_burst               = if (ENABLE_DDR_2) {Some(Output(UInt(2.W)))} else None
        val io_ddrPort2_axi_aw_bits_cache               = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_aw_bits_id                  = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_aw_bits_len                 = if (ENABLE_DDR_2) {Some(Output(UInt(8.W)))} else None
        val io_ddrPort2_axi_aw_bits_lock                = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_aw_bits_prot                = if (ENABLE_DDR_2) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort2_axi_aw_bits_qos                 = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_aw_bits_region              = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_aw_bits_size                = if (ENABLE_DDR_2) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort2_axi_ar_ready                    = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_ar_valid                    = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_ar_bits_addr                = if (ENABLE_DDR_2) {Some(Output(UInt(34.W)))} else None
        val io_ddrPort2_axi_ar_bits_burst               = if (ENABLE_DDR_2) {Some(Output(UInt(2.W)))} else None
        val io_ddrPort2_axi_ar_bits_cache               = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_ar_bits_id                  = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_ar_bits_len                 = if (ENABLE_DDR_2) {Some(Output(UInt(8.W)))} else None
        val io_ddrPort2_axi_ar_bits_lock                = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_ar_bits_prot                = if (ENABLE_DDR_2) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort2_axi_ar_bits_qos                 = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_ar_bits_region              = if (ENABLE_DDR_2) {Some(Output(UInt(4.W)))} else None
        val io_ddrPort2_axi_ar_bits_size                = if (ENABLE_DDR_2) {Some(Output(UInt(3.W)))} else None
        val io_ddrPort2_axi_w_ready                     = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_w_valid                     = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_w_bits_data                 = if (ENABLE_DDR_2) {Some(Output(UInt(512.W)))} else None
        val io_ddrPort2_axi_w_bits_last                 = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_w_bits_strb                 = if (ENABLE_DDR_2) {Some(Output(UInt(64.W)))} else None
        val io_ddrPort2_axi_r_ready                     = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_r_valid                     = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_r_bits_data                 = if (ENABLE_DDR_2) {Some(Input(UInt(512.W)))} else None
        val io_ddrPort2_axi_r_bits_last                 = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_r_bits_resp                 = if (ENABLE_DDR_2) {Some(Input(UInt(2.W)))} else None
        val io_ddrPort2_axi_r_bits_id                   = if (ENABLE_DDR_2) {Some(Input(UInt(4.W)))} else None
        val io_ddrPort2_axi_b_ready                     = if (ENABLE_DDR_2) {Some(Output(UInt(1.W)))} else None
        val io_ddrPort2_axi_b_valid                     = if (ENABLE_DDR_2) {Some(Input(UInt(1.W)))} else None
        val io_ddrPort2_axi_b_bits_id                   = if (ENABLE_DDR_2) {Some(Input(UInt(4.W)))} else None
        val io_ddrPort2_axi_b_bits_resp                 = if (ENABLE_DDR_2) {Some(Input(UInt(2.W)))} else None

        val io_qdma_axi_aclk                            = Input(UInt(1.W))
        val io_qdma_axi_aresetn                         = Input(UInt(1.W))
        val io_qdma_m_axib_awid                         = Input(UInt(4.W))
        val io_qdma_m_axib_awaddr                       = Input(UInt(64.W))
        val io_qdma_m_axib_awlen                        = Input(UInt(8.W))
        val io_qdma_m_axib_awsize                       = Input(UInt(3.W))
        val io_qdma_m_axib_awburst                      = Input(UInt(2.W))
        val io_qdma_m_axib_awprot                       = Input(UInt(3.W))
        val io_qdma_m_axib_awlock                       = Input(UInt(1.W))
        val io_qdma_m_axib_awcache                      = Input(UInt(4.W))
        val io_qdma_m_axib_awvalid                      = Input(UInt(1.W))
        val io_qdma_m_axib_awready                      = Output(UInt(1.W))
        val io_qdma_m_axib_wdata                        = Input(UInt(512.W))
        val io_qdma_m_axib_wstrb                        = Input(UInt(64.W))
        val io_qdma_m_axib_wlast                        = Input(UInt(1.W))
        val io_qdma_m_axib_wvalid                       = Input(UInt(1.W))
        val io_qdma_m_axib_wready                       = Output(UInt(1.W))
        val io_qdma_m_axib_bid                          = Output(UInt(4.W))
        val io_qdma_m_axib_bresp                        = Output(UInt(2.W))
        val io_qdma_m_axib_bvalid                       = Output(UInt(1.W))
        val io_qdma_m_axib_bready                       = Input(UInt(1.W))
        val io_qdma_m_axib_arid                         = Input(UInt(4.W))
        val io_qdma_m_axib_araddr                       = Input(UInt(64.W))
        val io_qdma_m_axib_arlen                        = Input(UInt(8.W))
        val io_qdma_m_axib_arsize                       = Input(UInt(3.W))
        val io_qdma_m_axib_arburst                      = Input(UInt(2.W))
        val io_qdma_m_axib_arprot                       = Input(UInt(3.W))
        val io_qdma_m_axib_arlock                       = Input(UInt(1.W))
        val io_qdma_m_axib_arcache                      = Input(UInt(4.W))
        val io_qdma_m_axib_arvalid                      = Input(UInt(1.W))
        val io_qdma_m_axib_arready                      = Output(UInt(1.W))
        val io_qdma_m_axib_rid                          = Output(UInt(4.W))
        val io_qdma_m_axib_rdata                        = Output(UInt(512.W))
        val io_qdma_m_axib_rresp                        = Output(UInt(2.W))
        val io_qdma_m_axib_rlast                        = Output(UInt(1.W))
        val io_qdma_m_axib_rvalid                       = Output(UInt(1.W))
        val io_qdma_m_axib_rready                       = Input(UInt(1.W))
        val io_qdma_m_axil_awaddr                       = Input(UInt(32.W))
        val io_qdma_m_axil_awvalid                      = Input(UInt(1.W))
        val io_qdma_m_axil_awready                      = Output(UInt(1.W))
        val io_qdma_m_axil_wdata                        = Input(UInt(32.W))
        val io_qdma_m_axil_wstrb                        = Input(UInt(4.W))
        val io_qdma_m_axil_wvalid                       = Input(UInt(1.W))
        val io_qdma_m_axil_wready                       = Output(UInt(1.W))
        val io_qdma_m_axil_bresp                        = Output(UInt(2.W))
        val io_qdma_m_axil_bvalid                       = Output(UInt(1.W))
        val io_qdma_m_axil_bready                       = Input(UInt(1.W))
        val io_qdma_m_axil_araddr                       = Input(UInt(32.W))
        val io_qdma_m_axil_arvalid                      = Input(UInt(1.W))
        val io_qdma_m_axil_arready                      = Output(UInt(1.W))
        val io_qdma_m_axil_rdata                        = Output(UInt(32.W))
        val io_qdma_m_axil_rresp                        = Output(UInt(2.W))
        val io_qdma_m_axil_rvalid                       = Output(UInt(1.W))
        val io_qdma_m_axil_rready                       = Input(UInt(1.W))
        val io_qdma_soft_reset_n                        = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_addr                  = Output(UInt(64.W))
        val io_qdma_h2c_byp_in_st_len                   = Output(UInt(32.W))
        val io_qdma_h2c_byp_in_st_eop                   = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_sop                   = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_mrkr_req              = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_sdi                   = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_qid                   = Output(UInt(11.W))
        val io_qdma_h2c_byp_in_st_error                 = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_func                  = Output(UInt(8.W))
        val io_qdma_h2c_byp_in_st_cidx                  = Output(UInt(16.W))
        val io_qdma_h2c_byp_in_st_port_id               = Output(UInt(3.W))
        val io_qdma_h2c_byp_in_st_no_dma                = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_vld                   = Output(UInt(1.W))
        val io_qdma_h2c_byp_in_st_rdy                   = Input(UInt(1.W))
        val io_qdma_c2h_byp_in_st_csh_addr              = Output(UInt(64.W))
        val io_qdma_c2h_byp_in_st_csh_qid               = Output(UInt(11.W))
        val io_qdma_c2h_byp_in_st_csh_error             = Output(UInt(1.W))
        val io_qdma_c2h_byp_in_st_csh_func              = Output(UInt(8.W))
        val io_qdma_c2h_byp_in_st_csh_port_id           = Output(UInt(3.W))
        val io_qdma_c2h_byp_in_st_csh_pfch_tag          = Output(UInt(7.W))
        val io_qdma_c2h_byp_in_st_csh_vld               = Output(UInt(1.W))
        val io_qdma_c2h_byp_in_st_csh_rdy               = Input(UInt(1.W))
        val io_qdma_s_axis_c2h_tdata                    = Output(UInt(512.W))
        val io_qdma_s_axis_c2h_tcrc                     = Output(UInt(32.W))
        val io_qdma_s_axis_c2h_ctrl_marker              = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_ctrl_ecc                 = Output(UInt(7.W))
        val io_qdma_s_axis_c2h_ctrl_len                 = Output(UInt(32.W))
        val io_qdma_s_axis_c2h_ctrl_port_id             = Output(UInt(3.W))
        val io_qdma_s_axis_c2h_ctrl_qid                 = Output(UInt(11.W))
        val io_qdma_s_axis_c2h_ctrl_has_cmpt            = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_mty                      = Output(UInt(6.W))
        val io_qdma_s_axis_c2h_tlast                    = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_tvalid                   = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_tready                   = Input(UInt(1.W))
        val io_qdma_m_axis_h2c_tdata                    = Input(UInt(512.W))
        val io_qdma_m_axis_h2c_tcrc                     = Input(UInt(32.W))
        val io_qdma_m_axis_h2c_tuser_qid                = Input(UInt(11.W))
        val io_qdma_m_axis_h2c_tuser_port_id            = Input(UInt(3.W))
        val io_qdma_m_axis_h2c_tuser_err                = Input(UInt(1.W))
        val io_qdma_m_axis_h2c_tuser_mdata              = Input(UInt(32.W))
        val io_qdma_m_axis_h2c_tuser_mty                = Input(UInt(6.W))
        val io_qdma_m_axis_h2c_tuser_zero_byte          = Input(UInt(1.W))
        val io_qdma_m_axis_h2c_tlast                    = Input(UInt(1.W))
        val io_qdma_m_axis_h2c_tvalid                   = Input(UInt(1.W))
        val io_qdma_m_axis_h2c_tready                   = Output(UInt(1.W))
        val io_qdma_axis_c2h_status_drop                = Input(UInt(1.W))
        val io_qdma_axis_c2h_status_last                = Input(UInt(1.W))
        val io_qdma_axis_c2h_status_cmp                 = Input(UInt(1.W))
        val io_qdma_axis_c2h_status_valid               = Input(UInt(1.W))
        val io_qdma_axis_c2h_status_qid                 = Input(UInt(11.W))
        val io_qdma_s_axis_c2h_cmpt_tdata               = Output(UInt(512.W))
        val io_qdma_s_axis_c2h_cmpt_size                = Output(UInt(2.W))
        val io_qdma_s_axis_c2h_cmpt_dpar                = Output(UInt(16.W))
        val io_qdma_s_axis_c2h_cmpt_tvalid              = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_cmpt_tready              = Input(UInt(1.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_qid            = Output(UInt(11.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_cmpt_type      = Output(UInt(2.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_wait_pld_pkt_id= Output(UInt(16.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_no_wrb_marker  = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_port_id        = Output(UInt(3.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_marker         = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_user_trig      = Output(UInt(1.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_col_idx        = Output(UInt(3.W))
        val io_qdma_s_axis_c2h_cmpt_ctrl_err_idx        = Output(UInt(3.W))
        val io_qdma_h2c_byp_out_rdy                     = Output(UInt(1.W))
        val io_qdma_c2h_byp_out_rdy                     = Output(UInt(1.W))
        val io_qdma_tm_dsc_sts_rdy                      = Output(UInt(1.W))
        val io_qdma_dsc_crdt_in_vld                     = Output(UInt(1.W))
        val io_qdma_dsc_crdt_in_rdy                     = Input(UInt(1.W))
        val io_qdma_dsc_crdt_in_dir                     = Output(UInt(1.W))
        val io_qdma_dsc_crdt_in_fence                   = Output(UInt(1.W))
        val io_qdma_dsc_crdt_in_qid                     = Output(UInt(11.W))
        val io_qdma_dsc_crdt_in_crdt                    = Output(UInt(16.W))
        val io_qdma_qsts_out_rdy                        = Output(UInt(1.W))
        val io_qdma_usr_irq_in_vld                      = Output(UInt(1.W))
        val io_qdma_usr_irq_in_vec                      = Output(UInt(11.W))
        val io_qdma_usr_irq_in_fnc                      = Output(UInt(8.W))
        val io_qdma_usr_irq_out_ack                     = Input(UInt(1.W))
        val io_qdma_usr_irq_out_fail                    = Input(UInt(1.W))
        val io_qdma_s_axib_awid                         = if (SLAVE_BRIDGE) {Some(Output(UInt(4.W)))} else {None}
        val io_qdma_s_axib_awaddr                       = if (SLAVE_BRIDGE) {Some(Output(UInt(64.W)))} else {None}
        val io_qdma_s_axib_awlen                        = if (SLAVE_BRIDGE) {Some(Output(UInt(8.W)))} else {None}
        val io_qdma_s_axib_awsize                       = if (SLAVE_BRIDGE) {Some(Output(UInt(3.W)))} else {None}
        val io_qdma_s_axib_awuser                       = if (SLAVE_BRIDGE) {Some(Output(UInt(12.W)))} else {None}
        val io_qdma_s_axib_awburst                      = if (SLAVE_BRIDGE) {Some(Output(UInt(2.W)))} else {None}
        val io_qdma_s_axib_awregion                     = if (SLAVE_BRIDGE) {Some(Output(UInt(4.W)))} else {None}
        val io_qdma_s_axib_awvalid                      = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_s_axib_awready                      = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_wdata                        = if (SLAVE_BRIDGE) {Some(Output(UInt(512.W)))} else {None}
        val io_qdma_s_axib_wstrb                        = if (SLAVE_BRIDGE) {Some(Output(UInt(64.W)))} else {None}
        val io_qdma_s_axib_wuser                        = if (SLAVE_BRIDGE) {Some(Output(UInt(64.W)))} else {None}
        val io_qdma_s_axib_wlast                        = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_s_axib_wvalid                       = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_s_axib_wready                       = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_bid                          = if (SLAVE_BRIDGE) {Some(Input(UInt(4.W)))} else {None}
        val io_qdma_s_axib_bresp                        = if (SLAVE_BRIDGE) {Some(Input(UInt(2.W)))} else {None}
        val io_qdma_s_axib_bvalid                       = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_bready                       = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_s_axib_arid                         = if (SLAVE_BRIDGE) {Some(Output(UInt(4.W)))} else {None}
        val io_qdma_s_axib_araddr                       = if (SLAVE_BRIDGE) {Some(Output(UInt(64.W)))} else {None}
        val io_qdma_s_axib_arlen                        = if (SLAVE_BRIDGE) {Some(Output(UInt(8.W)))} else {None}
        val io_qdma_s_axib_arsize                       = if (SLAVE_BRIDGE) {Some(Output(UInt(3.W)))} else {None}
        val io_qdma_s_axib_aruser                       = if (SLAVE_BRIDGE) {Some(Output(UInt(12.W)))} else {None}
        val io_qdma_s_axib_arburst                      = if (SLAVE_BRIDGE) {Some(Output(UInt(2.W)))} else {None}
        val io_qdma_s_axib_arregion                     = if (SLAVE_BRIDGE) {Some(Output(UInt(4.W)))} else {None}
        val io_qdma_s_axib_arvalid                      = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_s_axib_arready                      = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_rid                          = if (SLAVE_BRIDGE) {Some(Input(UInt(4.W)))} else {None}
        val io_qdma_s_axib_rdata                        = if (SLAVE_BRIDGE) {Some(Input(UInt(512.W)))} else {None}
        val io_qdma_s_axib_rresp                        = if (SLAVE_BRIDGE) {Some(Input(UInt(2.W)))} else {None}
        val io_qdma_s_axib_ruser                        = if (SLAVE_BRIDGE) {Some(Input(UInt(64.W)))} else {None}
        val io_qdma_s_axib_rlast                        = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_rvalid                       = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_s_axib_rready                       = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_st_rx_msg_data                      = if (SLAVE_BRIDGE) {Some(Input(UInt(32.W)))} else {None}
        val io_qdma_st_rx_msg_last                      = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}
        val io_qdma_st_rx_msg_rdy                       = if (SLAVE_BRIDGE) {Some(Output(UInt(1.W)))} else {None}
        val io_qdma_st_rx_msg_valid                     = if (SLAVE_BRIDGE) {Some(Input(UInt(1.W)))} else {None}

        val S_BSCAN_drck                                = Input(UInt(1.W))
        val S_BSCAN_shift                               = Input(UInt(1.W))
        val S_BSCAN_tdi                                 = Input(UInt(1.W))
        val S_BSCAN_update                              = Input(UInt(1.W))
        val S_BSCAN_sel                                 = Input(UInt(1.W))
        val S_BSCAN_tdo                                 = Output(UInt(1.W))
        val S_BSCAN_tms                                 = Input(UInt(1.W))
        val S_BSCAN_tck                                 = Input(UInt(1.W))
        val S_BSCAN_runtest                             = Input(UInt(1.W))
        val S_BSCAN_reset                               = Input(UInt(1.W))
        val S_BSCAN_capture                             = Input(UInt(1.W))
        val S_BSCAN_bscanid_en                          = Input(UInt(1.W))
    })
}